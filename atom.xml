<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>AtnNn.com</title>
    <link href="https://www.atnnn.com/atom.xml" rel="self" />
    <link href="https://www.atnnn.com" />
    <id>https://www.atnnn.com/atom.xml</id>
    <author>
        <name>Etienne Laurin</name>
        <email></email>
    </author>
    <updated>2018-10-03T00:00:00Z</updated>
    <entry>
    <title>C++ bitand Nix</title>
    <link href="https://www.atnnn.com/p/cpp-bitand-nix" />
    <id>https://www.atnnn.com/p/cpp-bitand-nix</id>
    <published>2018-10-03T00:00:00Z</published>
    <updated>2018-10-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October  3, 2018
    
</div>

<iframe width="600" height="480" src="//www.youtube.com/embed/dh9uh9mPtPA" frameborder="0" allowfullscreen>
</iframe>
<p><a href="/files/cpp-bitand-nix-1.pdf">Download the slides</a></p>
]]></summary>
</entry>
<entry>
    <title>Serving a website over IPFS</title>
    <link href="https://www.atnnn.com/p/ipfs-hosting" />
    <id>https://www.atnnn.com/p/ipfs-hosting</id>
    <published>2016-08-02T00:00:00Z</published>
    <updated>2016-08-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August  2, 2016
    
</div>

<p>This page is available over HTTP at <a href="http://atnnn.com/p/ipfs-hosting">http://atnnn.com</a> but also over IPFS at <code>http://ipfs.io/ipns/atnnn.com/p/ipfs-hosting</code> (edit: not any more). Here’s how I <strike>do</strike> did it:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ipfs</span> name publish <span class="kw">`</span><span class="ex">ipfs</span> add <span class="at">-rq</span> ~/atnnn.com/_site <span class="kw">|</span> <span class="fu">tail</span> <span class="at">-n</span> 1<span class="kw">`</span></span></code></pre></div>
<p>The rest of this article goes into more details and explains why you might want to do it too.</p>
<p>I discovered <a href="http://ipfs.io">IPFS</a> when I saw <a href="https://www.youtube.com/watch?v=8CMxDNuuAiQ">this amazing demo</a> on <a href="https://news.ycombinator.com/item?id=9083849">Hacker News</a> last year. I’ve been using it regularly ever since, and I even <a href="https://github.com/ipfs/go-ipfs/commits?author=AtnNn">fixed a few annoyances</a> that I found.</p>
<h2 id="a-quick-overview-of-ipfs">A quick overview of IPFS</h2>
<p>IPFS is a great way to share files. IPFS stands for Inter-Planetary File System. The name is as ambitious as the project’s goal to replace HTTP.</p>
<ul>
<li><p>An <em>IPFS gateway</em>, such as <a href="http://ipfs.io" class="uri">http://ipfs.io</a>, lets you use IPFS without installing it.</p></li>
<li><p>An <em>IPFS daemon</em> is an application that runs in the background, allowing you to use IPFS locally.</p></li>
<li><p>The <em>IPFS swarm</em> is a decentralised network of IPFS daemons. Daemons find each other using a DHT or mDNS.</p></li>
<li><p>An <em>IPFS hash</em> uniquely identifies each file and directory.</p></li>
<li><p><em>IPNS</em>, the IPFS Name System, allows finding files by name instead of using long cryptic hashes.</p></li>
<li><p>An <em>IPFS mount</em> allows publishing and accessing files to and from IPFS as if they were local files.</p></li>
<li><p>The <em>IPFS repo</em> stores a temporary local copy of files fetched from IPFS. This copy becomes permanent if the file is <em>pinned</em>.</p></li>
<li><p><em>IPFS bitswap</em> is a bittorrrent-like algorithm for efficiently transfering files over IPFS. All files in the repo are automatically shared with the rest of the swarm.</p></li>
<li><p><a href="https://github.com/ipfs/go-ipfs"><em>go-ipfs</em></a> is the main implementation of IPFS.</p></li>
</ul>
<p>The <a href="https://github.com/ipfs/specs">the IPFS spec</a> has more details on how all these concepts work together.</p>
<h2 id="installing-ipfs">Installing IPFS</h2>
<p>You can follow the <a href="https://ipfs.io/docs/install/">official instructions</a> to install IPFS on your computer. If you are running a 64-bit Linux, you can follow along with me. I start by downloading and extracting IPFS:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> wget https://dist.ipfs.io/go-ipfs/v0.4.3-rc1/go-ipfs_v0.4.3-rc1_linux-amd64.tar.gz</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> tar xf go-ipfs_v0.4.3-rc1_linux-amd64.tar.gz</span></code></pre></div>
<p>Then I install the <code>ipfs</code> binary to my <code>PATH</code> and initialize the IPFS repo:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> mv go-ipfs/ipfs /usr/local/bin/ipfs</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ipfs init</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ex">initializing</span> ipfs node at /home/atnnn/.ipfs</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ex">generating</span> 2048-bit RSA keypair...done</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">peer</span> identity: QmSg4AzfWd6YHrDyZp2w7FqTeP6fAQcb6X5wQ8KoVYYvaP</span></code></pre></div>
<p>I start the IPFS daemon to connect to the swarm:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ipfs daemon</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Initializing</span> daemon...</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Swarm</span> listening on /ip4/127.0.0.1/tcp/4001</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Swarm</span> listening on /ip4/172.17.0.1/tcp/4001</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Swarm</span> listening on /ip4/69.132.122.247/tcp/4001</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Swarm</span> listening on /ip6/::1/tcp/4001</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="ex">API</span> server listening on /ip4/127.0.0.1/tcp/5001</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="ex">Gateway</span> <span class="er">(</span><span class="bu">readonly</span><span class="kw">)</span> <span class="ex">server</span> listening on /ip4/127.0.0.1/tcp/8080</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="ex">Daemon</span> is ready</span></code></pre></div>
<p>I let the daemon run in the background.</p>
<h2 id="adding-my-website-to-ipfs">Adding my website to IPFS</h2>
<p>I store my website in my local <code>atnnn.com/_site</code> folder. The whole process of uploading it is automated in a <a href="https://github.com/AtnNn/atnnn.com/blob/master/Makefile#L23-L25"><code>Makefile</code></a>. Let me take you through it step by step.</p>
<p>But first, here’s how you might download a local copy of your website. Replace <code>www.atnnn.com</code> with your own website:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> SITE=www.atnnn.com</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> wget <span class="at">--mirror</span> <span class="at">--convert-links</span> <span class="at">--page-requisites</span> http://<span class="va">$SITE</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Total</span> wall clock time: 2.7s</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Downloaded:</span> 40 files, 2.4M in 0.5s <span class="er">(</span><span class="ex">4.69</span> MB/s<span class="kw">)</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Converted</span> links in 20 files in 0.003 seconds.</span></code></pre></div>
<p>It’s important to use relative links and to include all assets such as images, styles and fonts. <code>wget</code> will try to do that if you tell it to <code>--convert-links</code> and to download <code>--page-requisites</code> but it isn’t perfect.</p>
<p>After building a local copy of my website, I can add it to IPFS:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ipfs add <span class="at">-r</span> <span class="va">$SITE</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ex">added</span> QmcgHMhAzAqZpQUnarDhqA8XhAbYuHuixkUH2r5T8S9YtP atnnn.com/_site</span></code></pre></div>
<p>My website is now available via IPFS at:</p>
<p><a href="https://ipfs.io/ipfs/QmcgHMhAzAqZpQUnarDhqA8XhAbYuHuixkUH2r5T8S9YtP/">/ipfs/QmcgHMhAzAqZpQUnarDhqA8XhAbYuHuixkUH2r5T8S9YtP/</a></p>
<h2 id="linking-to-my-website-on-ipfs">Linking to my website on IPFS</h2>
<p>So far, all I’ve got is a long and cryptic hash to identify my website. Using it has many advantages:</p>
<ul>
<li><p>It’s a secure hash. Anyone can host a copy of my website but all visitors can have the guarantee that it hasn’t been modified.</p></li>
<li><p>If you link to my website, you can pin that hash and make sure your link never dies. If I stop hosting my website, the link will not die as long as someone else still has it pinned.</p></li>
<li><p>If I turn my website into a My Little Pony fansite, the link will still point to my original site.</p></li>
<li><p>Visitors can automatically download the website from each other, reducing their load time and the load on my IPFS daemon.</p></li>
</ul>
<p>To make sure my website stays online, I am going to pin it on another machine. I have a Linode VPS that I use for that purpose, called <code>ipfs.atnnn</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ssh ipfs.atnnn</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ex">ipfs.atnnn$</span> ipfs pin add QmcgHMhAzAqZpQUnarDhqA8XhAbYuHuixkUH2r5T8S9YtP</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="ex">pinned</span> QmcgHMhAzAqZpQUnarDhqA8XhAbYuHuixkUH2r5T8S9YtP recursively</span></code></pre></div>
<p>I can also use the id of my IPFS daemon as an updatable pointer to my website:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ipfs.atnnn$</span> ipfs name publish QmcgHMhAzAqZpQUnarDhqA8XhAbYuHuixkUH2r5T8S9YtP</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Published</span> to QmbtTW3Lj5ad3UotQ7YzKx8bSSaXKirn2ggxxaZWV28z3D</span></code></pre></div>
<p>The hash starting with <code>QmbtTW3L</code> is the unique id of my IPFS daemon. My website can now be accessed using IPNS at that id:</p>
<p><a href="https://ipfs.io/ipns/QmbtTW3Lj5ad3UotQ7YzKx8bSSaXKirn2ggxxaZWV28z3D">/ipns/QmbtTW3Lj5ad3UotQ7YzKx8bSSaXKirn2ggxxaZWV28z3D</a></p>
<p>The id is also the hash of a public key and IPNS forbids anyone else from publishing to it. It provides me with a safe link that I can share and that will always point to the newest version of my website.</p>
<p>But it is still long and cryptic. To fix that, IPNS lets me use a domain name as an alias for any IPFS or IPNS path. To do so, I added a <code>TXT</code> record to my domain with the special <code>dnslink=</code> setting. My DNS provider, ZoneEdit, lets me do this easily:</p>
<p><img src="/images/dnslink.png" /></p>
<p>I can verify that the record is in place:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> host <span class="at">-t</span> TXT atnnn.com</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ex">atnnn.com</span> descriptive text <span class="st">&quot;dnslink=/ipns/QmbtTW3Lj5ad3UotQ7YzKx8bSSaXKirn2ggxxaZWV28z3D&quot;</span></span></code></pre></div>
<p>IPNS happily follows this record and I can share a new link to my website:</p>
<p><a href="https://ipfs.io/ipns/atnnn.com/">/ipns/atnnn.com</a></p>
<h2 id="the-ipfs-gateway">The IPFS gateway</h2>
<p>The public <code>http://ipfs.io</code> HTTP gateway is the easiest way to share IPFS and IPNS links with people who do not have IPFS installed.</p>
<p>If you have IPFS installed, you can access these links directly through IPFS by using a browser plugin, such as <a href="https://addons.mozilla.org/en-US/firefox/addon/ipfs-gateway-redirect/">this one for Firefox</a> or <a href="https://chrome.google.com/webstore/detail/ipfs-station/kckhgoigikkadogfdiojcblegfhdnjei">this one for Chrome</a>.</p>
<p>Another alternative is to host an IPFS gateway yourself. You can restrict which IPFS websites can be accessed using a reverse proxy such as Nginx. For example, I might use this Nginx configuration:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>location <span class="op">/</span> {</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  rewrite <span class="op">/</span>(<span class="op">.*</span>) <span class="op">/</span>ipns<span class="op">/</span>atnnn<span class="op">.</span><span class="at">com</span><span class="op">/</span>$1 <span class="cf">break</span><span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  proxy_pass <span class="dt">http</span><span class="op">:</span><span class="co">//127.0.0.1:8080;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<h2 id="enjoy-ipfs">Enjoy IPFS</h2>
<p>Now my website is available over IPFS, just like many others such as <a href="https://neocities.org/permanent-web">neocities.org</a> and <a href="https://ipfs.pics/">ipfs.pics</a>. But hosting websites is not the only thing IPFS can do. I’ve also used IPFS for other projects, as a replacement for Rsync when sharing build artifacts between servers and as a replacement for Bittorrent for sharing large files with friends.</p>
<p>I don’t think IPFS will ever replace HTTP, but I’m certain it can keep improving the web for both users and developers.</p>
]]></summary>
</entry>
<entry>
    <title>C++ left arrow operator</title>
    <link href="https://www.atnnn.com/p/operator-larrow" />
    <id>https://www.atnnn.com/p/operator-larrow</id>
    <published>2016-07-29T00:00:00Z</published>
    <updated>2016-07-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 29, 2016
    
</div>

<p>Sometimes you have a pointer to a class, and you want to invoke a method. You can use the <code>-&gt;</code> operator for that.</p>
<p>So what do you do when you have a pointer to a method, and want to invoke it on a class? Use the <code>&lt;-</code> operator!</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span><span class="op">&lt;</span><span class="kw">class</span> T<span class="op">&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> larrow <span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    larrow<span class="op">(</span>T<span class="op">*</span> <span class="va">a_</span><span class="op">)</span> <span class="op">:</span> a<span class="op">(</span><span class="va">a_</span><span class="op">)</span> <span class="op">{</span> <span class="op">}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    T<span class="op">*</span> a<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> T<span class="op">,</span> <span class="kw">class</span> R<span class="op">&gt;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>R <span class="kw">operator</span><span class="op">&lt;(</span>R <span class="op">(</span>T<span class="op">::*</span> f<span class="op">)(),</span> larrow<span class="op">&lt;</span>T<span class="op">&gt;</span> it<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">(</span>it<span class="op">.</span>a<span class="op">-&gt;*</span>f<span class="op">)();</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span><span class="op">&lt;</span><span class="kw">class</span> T<span class="op">&gt;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>larrow<span class="op">&lt;</span>T<span class="op">&gt;</span> <span class="kw">operator</span><span class="op">-(</span>T<span class="op">&amp;</span> a<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> larrow<span class="op">&lt;</span>T<span class="op">&gt;(&amp;</span>a<span class="op">);</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> C <span class="op">{</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> f<span class="op">()</span> <span class="op">{</span> <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">&quot;foo</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">;</span> <span class="op">}</span>    </span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    C x<span class="op">;</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">(&amp;</span>C<span class="op">::</span>f<span class="op">)&lt;-</span>x<span class="op">;</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
]]></summary>
</entry>
<entry>
    <title>Demo: video streaming with RethinkDB</title>
    <link href="https://www.atnnn.com/p/rethinkdb-stream" />
    <id>https://www.atnnn.com/p/rethinkdb-stream</id>
    <published>2015-03-20T00:00:00Z</published>
    <updated>2015-03-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March 20, 2015
    
</div>

<p><img src="/images/rethinkdb-stream/screenshot.gif" /></p>
<p><a href="https://github.com/AtnNn/rethinkdb-stream">More details on GitHub</a></p>
]]></summary>
</entry>
<entry>
    <title>Presentation on my RethinkDB driver for Haskell</title>
    <link href="https://www.atnnn.com/p/haskell-rethinkdb-presentation" />
    <id>https://www.atnnn.com/p/haskell-rethinkdb-presentation</id>
    <published>2015-03-07T00:00:00Z</published>
    <updated>2015-03-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  7, 2015
    
</div>

<iframe width="600" height="480" src="//www.youtube.com/embed/Qvn8EQfgUCA" frameborder="0" allowfullscreen>
</iframe>
<p><a href="/files/haskell-driver-2014-11-13.pdf">Download the slides</a></p>
]]></summary>
</entry>
<entry>
    <title>Cross compiling RethinkDB for ARM</title>
    <link href="https://www.atnnn.com/p/cross-compile-rethinkdb" />
    <id>https://www.atnnn.com/p/cross-compile-rethinkdb</id>
    <published>2015-03-06T00:00:00Z</published>
    <updated>2015-03-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  6, 2015
    
</div>

<p><img src="/images/cross/thinker-build.png" /></p>
<p>Building <a href="http://rethinkdb.com">RethinkDB</a> on a Raspberry Pi takes a very long time. However we can speed it up using cross-compilation.</p>
<h2 id="terminology">Terminology</h2>
<p>Cross-compilation allows us to build ARM software on a PC. There is a common terminology used when cross-compiling that can be confusing:</p>
<ul>
<li><p>The <strong>build</strong> architecture is the architecture we are building on</p></li>
<li><p>The <strong>host</strong> architecture is the architecture the code will run in</p></li>
<li><p>When building or referencing a compiler or related tools, the <strong>target</strong> architecture is the architecture that it will build for</p></li>
<li><p>The <strong>toolchain</strong> is the set of compilers and tools for a given architecture</p></li>
<li><p>The host toolchain is also known as the <strong>cross-compiler</strong>. It runs on the build architecture and targets the host architecture.</p></li>
</ul>
<p>In this post, We will walk through the steps required to <strong>build</strong> on a Linux PC a version of RethinkDB that will run, or be <strong>host</strong>ed, on ARM.</p>
<h2 id="the-cross-compiler">The cross-compiler</h2>
<p>The <a href="https://github.com/raspberrypi/tools">raspberrypi/tools</a> repository on github contains a pre-compiled cross-compiler for the raspberry pi, with no installation necessary other than downloading the repository.</p>
<pre class="shell"><code>git clone --depth 1 https://github.com/raspberrypi/tools.git pi-tools</code></pre>
<p>If that compiler doesn’t work, tools such as <a href="https://www.gentoo.org/proj/en/base/embedded/handbook/?part=1&amp;chap=2">crossdev</a> or <a href="http://crosstool-ng.org/">crossdev-ng</a> can be used to build a cross-compiler from scratch.</p>
<h2 id="the-environment">The environment</h2>
<p>RethinkDB makes two assumptions when cross-compiling:</p>
<ul>
<li><p>The cross-compiler tools are available in the <code>CC</code>, <code>CXX</code>, <code>LD</code>, <code>AR</code> and <code>RANLIB</code> variables</p></li>
<li><p>The build toolchain is available in the <code>PATH</code></p></li>
</ul>
<p>This script will setup such an environment for us:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="va">CROSS</span><span class="op">=</span>~/pi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">CC</span><span class="op">=</span><span class="va">$CROSS</span>-gcc</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">CXX</span><span class="op">=</span><span class="va">$CROSS</span>-g++</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">LD</span><span class="op">=</span><span class="va">$CROSS</span>-ld</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">AR</span><span class="op">=</span><span class="va">$CROSS</span>-ar</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">RANLIB</span><span class="op">=</span><span class="va">$CROSS</span>-ranlib</span></code></pre></div>
<p>We can pass the <code>-dumpmachine</code> argument to GCC to check the target architecture:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> uname <span class="at">-om</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">x86_64</span> GNU/Linux</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> gcc <span class="at">-dumpmachine</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ex">x86_64-linux-gnu</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> <span class="va">$CXX</span> <span class="at">-dumpmachine</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ex">arm-linux-gnueabihf</span></span></code></pre></div>
<h2 id="the-build">The build</h2>
<p>We can now fetch and build RethinkDB for the Raspberry Pi.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> clone <span class="at">-b</span> v2.0.x https://github.com/rethinkdb/rethinkdb</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> rethinkdb</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="fu">rm</span> <span class="at">-rf</span> external/v8<span class="pp">*</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ex">./configure</span> <span class="at">--allow-fetch</span> <span class="at">--with-system-malloc</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="fu">make</span> <span class="at">-j</span> <span class="kw">`</span><span class="ex">nproc</span><span class="kw">`</span></span></code></pre></div>
<ul>
<li><p>Cross-compiling has been tested in the v2.0.x branch.</p></li>
<li><p>The bundled version of v8 does not include a copy of the ICU library, which it requires for cross-compiling, so it has to be removed</p></li>
<li><p>The <code>--allow-fetch</code> flag tells RethinkDB to fetch missing libraries. The RethinkDB build system includes a tiny package manager that can download and cross-compile all the required dependencies.</p></li>
<li><p>The <code>--with-system-malloc</code> flag disables the use of <code>jemalloc</code></p></li>
<li><p>The <code>-j `nproc`</code> flag parallelizes the build by taking advantage of the multiple cores that the Pi does not have</p></li>
</ul>
<p>When the build completes, we will have version of RethinkDB that runs on the Raspberry Pi:</p>
<pre><code>$ scp build/release_system/rethinkdb pi:
$ ssh pi ./rethinkdb
Running rethinkdb 1.16.0-1-447-g4400d8 (GCC 4.8.3)...
Running on Linux 3.18.7+ armv6l</code></pre>
]]></summary>
</entry>
<entry>
    <title>Kobo Deluxe</title>
    <link href="https://www.atnnn.com/p/kobo-deluxe" />
    <id>https://www.atnnn.com/p/kobo-deluxe</id>
    <published>2013-09-06T00:00:00Z</published>
    <updated>2013-09-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  6, 2013
    
</div>

<p>I have always been a big fan of <a href="http://www.olofson.net/kobodl/">Kobo Deluxe</a>. I have recoreded a few videos to show off some of the more interesting levels of the game.</p>
<iframe width="600" height="480" src="//www.youtube.com/embed/W2Jx6vFIskg" frameborder="0" allowfullscreen>
</iframe>
<iframe width="600" height="480" src="//www.youtube.com/embed/Zm0N2q95lUk" frameborder="0" allowfullscreen>
</iframe>
<iframe width="600" height="480" src="//www.youtube.com/embed/_UGFXnxEowE" frameborder="0" allowfullscreen>
</iframe>
<iframe width="600" height="480" src="//www.youtube.com/embed/PxcfqjHyfnA" frameborder="0" allowfullscreen>
</iframe>
<iframe width="600" height="480" src="//www.youtube.com/embed/BztxXS3bMkM" frameborder="0" allowfullscreen>
</iframe>
<iframe width="600" height="480" src="//www.youtube.com/embed/gJZqvOYfYdY" frameborder="0" allowfullscreen>
</iframe>
<iframe width="600" height="480" src="//www.youtube.com/embed/uL7fBav-O-4" frameborder="0" allowfullscreen>
</iframe>
]]></summary>
</entry>
<entry>
    <title>Experimenting with Blender</title>
    <link href="https://www.atnnn.com/p/experimenting-with-blender" />
    <id>https://www.atnnn.com/p/experimenting-with-blender</id>
    <published>2012-10-16T00:00:00Z</published>
    <updated>2012-10-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 16, 2012
    
</div>

<p>Experimenting with cross sections in Blender 2.63</p>
<iframe width="600" height="480" src="//www.youtube.com/embed/BOBsRID1SrE" frameborder="0" allowfullscreen>
</iframe>
]]></summary>
</entry>
<entry>
    <title>type-prelude and GHC 7.6.1</title>
    <link href="https://www.atnnn.com/p/type-prelude" />
    <id>https://www.atnnn.com/p/type-prelude</id>
    <published>2012-09-06T00:00:00Z</published>
    <updated>2012-09-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  6, 2012
    
</div>

<p>The <a href="http://www.haskell.org/ghc/docs/7.6.1/html/users_guide/release-7-6-1.html">new release of GHC</a> has many new features. <a href="https://plus.google.com/102696032232347740796/posts/bEiZmixWJgB">Deferred type errors</a> are very useful but the other features are a lot more fun. It is now a lot easier to encode invariants, information and computation at the type level. How much of the prelude can be ported, and how difficult is it to port?</p>
<p>All the code from this article is available in the <a href="http://hackage.haskell.org/package/type-prelude">type-prelude package on hackage</a>.</p>
<h2 id="integer">Integer</h2>
<p>The prelude has an Integer type that can represent any positive or negative integer. GHC has a new feature, data kind promotion, which automatically promotes data types and constructors into data kinds and types when it is possible. It is not possible to promote this type because its implementation is hidden.</p>
<p>GHC has a Nat kind which allows any natural number to be used as a type, but they cannot be used to replace Integer.</p>
<p>The <code>Prelude.Type.Integer</code> module provides the <code>Integer</code> kind, implemented as an unbounded list of bits using twos-complement. The <code>I</code> class converts small <code>Nat</code>s into Integers.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Integer</span> <span class="ot">=</span> <span class="dt">One</span> <span class="dt">Integer</span> <span class="op">|</span> <span class="dt">Zero</span> <span class="dt">Integer</span> <span class="op">|</span> <span class="dt">Ones</span> <span class="op">|</span> <span class="dt">Zeros</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">I</span> (<span class="ot">a ::</span> <span class="dt">Nat</span>)<span class="ot"> ::</span> <span class="dt">Integer</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">I</span> <span class="dv">0</span> <span class="ot">=</span> <span class="dt">Zeros</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">I</span> <span class="dv">1</span> <span class="ot">=</span> <span class="dt">One</span> <span class="dt">Zeros</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">I</span> <span class="dv">2</span> <span class="ot">=</span> <span class="dt">Zero</span> (<span class="dt">One</span> (<span class="dt">Zeros</span>))</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">I</span> <span class="dv">3</span> <span class="ot">=</span> <span class="dt">One</span> (<span class="dt">One</span> <span class="dt">Zeros</span>)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">I</span> <span class="dv">4</span> <span class="ot">=</span> <span class="dt">Zero</span> (<span class="dt">Zero</span> (<span class="dt">One</span> <span class="dt">Zeros</span>))</span></code></pre></div>
<p>Three extra type functions allow working with <code>Integer</code>s as if they really were lists of <code>Bool</code>s.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">IntegerHead</span> (<span class="ot">i ::</span> <span class="dt">Integer</span>)<span class="ot"> ::</span> <span class="dt">Bool</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">IntegerTail</span> (<span class="ot">i ::</span> <span class="dt">Integer</span>)<span class="ot"> ::</span> <span class="dt">Integer</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">IntegerCons</span> (<span class="ot">b ::</span> <span class="dt">Bool</span>) (<span class="ot">i ::</span> <span class="dt">Integer</span>)<span class="ot"> ::</span> <span class="dt">Integer</span></span></code></pre></div>
<p>Most of the functions and operators from <code>Num</code> and <code>Integral</code> can be implemented very easily for this <code>Integer</code> kind. For example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Negate</span> (<span class="ot">a ::</span> k)<span class="ot"> ::</span> k</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Negate</span> a <span class="ot">=</span> <span class="dt">Complement</span> a <span class="op">+</span> <span class="dt">I</span> <span class="dv">1</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> (<span class="ot">a ::</span> k) <span class="op">*</span> (<span class="ot">b ::</span> k)<span class="ot"> ::</span> k</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Zeros</span> <span class="op">*</span> j <span class="ot">=</span> <span class="dt">Zeros</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Ones</span> <span class="op">*</span> j <span class="ot">=</span> <span class="dt">Negate</span> j</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> (<span class="dt">Zero</span> i) <span class="op">*</span> j <span class="ot">=</span> <span class="dt">IntegerCons</span> <span class="dt">False</span> (i <span class="op">*</span> j)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> (<span class="dt">One</span> i) <span class="op">*</span> j <span class="ot">=</span> j <span class="op">+</span> <span class="dt">IntegerCons</span> <span class="dt">False</span> (i <span class="op">*</span> j)</span></code></pre></div>
<h2 id="proxy">Proxy</h2>
<p>Constructors, when promoted, become types. But these types do not have any values. The <code>Prelude.Type.Value</code> provides the <code>T</code> type (known elsewhere as <code>Proxy</code>).</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">T</span> a <span class="ot">=</span> <span class="dt">T</span></span></code></pre></div>
<p>It also provides a method of converting a <code>T</code> into the value of its associated type.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Value</span> (<span class="ot">a ::</span> k) (<span class="ot">t ::</span> <span class="op">*</span>) <span class="op">|</span> k <span class="ot">-&gt;</span> t <span class="kw">where</span><span class="ot"> value ::</span> <span class="dt">T</span> a <span class="ot">-&gt;</span> t</span></code></pre></div>
<p>The <code>Value</code> instances for Integers converts each constructor into its corresponding value.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Value</span> <span class="dt">Zeros</span> <span class="dt">Prelude.Integer</span> <span class="kw">where</span> value _ <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Value</span> <span class="dt">Ones</span> <span class="dt">Prelude.Integer</span> <span class="kw">where</span> value _ <span class="ot">=</span> <span class="op">-</span><span class="dv">1</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Value</span> i <span class="dt">Prelude.Integer</span>) <span class="ot">=&gt;</span> <span class="dt">Value</span> (<span class="dt">One</span> i) <span class="dt">Prelude.Integer</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span> value _ <span class="ot">=</span> shift (value (<span class="dt">T</span><span class="ot">::</span><span class="dt">T</span> i)) <span class="dv">1</span> <span class="op">Prelude.+</span> <span class="dv">1</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Value</span> i <span class="dt">Prelude.Integer</span>) <span class="ot">=&gt;</span> <span class="dt">Value</span> (<span class="dt">Zero</span> i) <span class="dt">Prelude.Integer</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span> value _ <span class="ot">=</span> shift (value (<span class="dt">T</span><span class="ot">::</span><span class="dt">T</span> i)) <span class="dv">1</span></span></code></pre></div>
<p>The <code>T::T</code> idiom is very common in code that uses <code>Prelude.Type</code>. It is made even more useful when using the <code>Show</code> instance for <code>T</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Value</span> a t, <span class="dt">Prelude.Show</span> t) <span class="ot">=&gt;</span> <span class="dt">Prelude.Show</span> (<span class="dt">T</span> a) <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>   <span class="fu">show</span> _ <span class="ot">=</span> Prelude.show (value (<span class="dt">T</span><span class="ot">::</span><span class="dt">T</span> a))</span></code></pre></div>
<p>It allows easy type-level programming in ghci.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Prelude.Type</span><span class="op">&gt;</span> <span class="dt">T</span><span class="ot">::</span><span class="dt">T</span> (<span class="dt">One</span> (<span class="dt">Zero</span> <span class="dt">Ones</span>))</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="op">-</span><span class="dv">3</span></span></code></pre></div>
<h2 id="lists">Lists</h2>
<p>The list type has two well known constructors which GHC promotes into types. To avoid confusion, the cons and nil types need to be prefixed with a single quote.</p>
<p>Converting list functions into type-level functions is often very straightforward. For example, the last function can be written like this.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Last</span> (<span class="ot">a ::</span> [k])<span class="ot"> ::</span> k</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Last</span> &#39;[] <span class="ot">=</span> <span class="dt">Error</span> <span class="st">&quot;Last_: empty list&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Last</span> (x &#39;<span class="op">:</span> y &#39;<span class="op">:</span> xs) <span class="ot">=</span> <span class="dt">Last</span> (y &#39;<span class="op">:</span> xs)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Last</span> (x &#39;<span class="op">:</span> &#39;[]) <span class="ot">=</span> x</span></code></pre></div>
<p>And it works:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Prelude.Type.Families</span><span class="op">&gt;</span> <span class="dt">T</span><span class="ot">::</span><span class="dt">T</span> (<span class="dt">Last</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>])</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span></span></code></pre></div>
<h2 id="type-families-vs-type-classes">Type Families vs Type Classes</h2>
<p>The <code>Last</code> function can also be implemented as a type class.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Last</span> (<span class="ot">l ::</span> [a]) (<span class="ot">x ::</span> a) <span class="op">|</span> l <span class="ot">-&gt;</span> x</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Error</span> <span class="st">&quot;Last: empty list&quot;</span> <span class="ot">=&gt;</span> <span class="dt">Last</span> &#39;[] a</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> a <span class="op">~</span> b <span class="ot">=&gt;</span> <span class="dt">Last</span> &#39;[a] b</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Last</span> (y &#39;<span class="op">:</span> xs) a <span class="ot">=&gt;</span> <span class="dt">Last</span> (x &#39;<span class="op">:</span> y &#39;<span class="op">:</span> xs) a</span></code></pre></div>
<p>But classes need to be used differently.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Prelude.Type</span><span class="op">&gt;</span> <span class="dt">T</span><span class="ot"> ::</span> <span class="dt">Last</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] a <span class="ot">=&gt;</span> <span class="dt">T</span> a</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span></span></code></pre></div>
<p>Thanks to Constraint kinds, we can add a Value instance for simple constraints.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (c a, <span class="dt">Value</span> a t) <span class="ot">=&gt;</span> <span class="dt">Value</span> (<span class="ot">c ::</span> k <span class="ot">-&gt;</span> <span class="dt">Constraint</span>) t</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> value _ <span class="ot">=</span> value (<span class="dt">T</span><span class="ot">::</span><span class="dt">T</span> a)</span></code></pre></div>
<p>Now we can use the <code>Last</code> class in the exact same way we used the <code>Last</code> type family.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Prelude.Type</span><span class="op">&gt;</span> <span class="dt">T</span><span class="ot">::</span><span class="dt">T</span> (<span class="dt">Last</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>])</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span></span></code></pre></div>
<p>Code written using type families often looks nicer, so why use type classes and functional dependencies? Because we can not (yet?) partially apply type families. However type classes do not mind being partially applied. We can easily write higher order type classes such as <code>FoldR</code>.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">FoldR</span> (<span class="ot">f ::</span> a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Constraint</span>)</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    (<span class="ot">nil ::</span> b) (<span class="ot">list ::</span> [a]) (<span class="ot">ret ::</span> b) <span class="op">|</span> f nil list <span class="ot">-&gt;</span> ret</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Id</span> nil ret <span class="ot">=&gt;</span> <span class="dt">FoldR</span> f nil &#39;[] ret</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">FoldR</span> f nil xs <span class="fu">tail</span>, f x <span class="fu">tail</span> ret)</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">FoldR</span> f nil (x &#39;<span class="op">:</span> xs) ret</span></code></pre></div>
<p><code>FoldR</code> can be used to implement <code>Or</code>.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Or</span> <span class="ot">=</span> <span class="dt">FoldR</span> (<span class="op">||</span>) &#39;[]</span></code></pre></div>
<p><code>Or</code> can be used to implement <code>Any</code>.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Any</span> <span class="ot">=</span> (<span class="dt">Compose1</span> <span class="dt">Or</span>) <span class="ot">`Compose2`</span> <span class="dt">Partial1</span> <span class="dt">Map</span></span></code></pre></div>
<p>Partial application of type classes does not work exactly the same way as in regular Haskell, which is why the <code>Compose</code> class (corresponding to (.)) has many variants. Each variant has a different arity. But it still works.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Prelude.Type</span><span class="op">&gt;</span> <span class="dt">T</span><span class="ot">::</span><span class="dt">T</span> (<span class="dt">Any</span> ((<span class="op">==</span>) <span class="dv">1</span>) &#39;[<span class="dv">3</span>,<span class="dv">2</span>,<span class="dv">1</span>])</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span></code></pre></div>
<h2 id="if-and-case">If and Case</h2>
<p>To make type-level programming easier, <code>Prelude.Type</code> also provides <code>If</code> and <code>Case</code> classes. For example, <code>Case</code> is used to implement <code>Ord</code>.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Compare</span> (<span class="ot">a ::</span> k) (<span class="ot">b ::</span> k) (<span class="ot">o ::</span> <span class="dt">Ordering</span>) <span class="op">|</span> a b <span class="ot">-&gt;</span> o</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> ((<span class="ot">a ::</span> k) <span class="op">&lt;</span> (<span class="ot">b ::</span> k)) (<span class="ot">p ::</span> <span class="dt">Bool</span>) <span class="op">|</span> a b <span class="ot">-&gt;</span> p</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Compare</span> a b o,</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>          <span class="dt">Case</span> o [<span class="dt">LT</span> <span class="op">--&gt;</span> <span class="dt">True</span> <span class="op">~</span> p,</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>                  <span class="dt">Otherwise</span> (<span class="dt">False</span> <span class="op">~</span> p)])</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>         <span class="ot">=&gt;</span> (a <span class="op">&lt;</span> b) p</span></code></pre></div>
<p>And If is used to implement <code>Enum</code> for <code>Integer</code>s.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">If</span> (b <span class="op">&lt;</span> a) (l <span class="op">~</span> &#39;[])</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>            (((<span class="dt">I</span> <span class="dv">1</span>) <span class="op">+</span> a) c, <span class="dt">EnumFromTo</span> c b k, l <span class="op">~</span> (a &#39;<span class="op">:</span> k))</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>         <span class="ot">=&gt;</span> <span class="dt">EnumFromTo</span> (<span class="ot">a ::</span> <span class="dt">Integer</span>) b l</span></code></pre></div>
<h2 id="extras">Extras</h2>
<p><code>Prelude.Type</code> contains a port of most of the functions from the Prelude that operate on <code>Bool</code>, <code>Integer</code>, lists and functions.</p>
<p>For fun, it also provides the <code>Main</code> type alias for writing executables entirely on the type level.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DataKinds, FlexibleInstances, MultiParamTypeClasses,</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    FlexibleContexts, UndecidableInstances, KindSignatures #-}</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude.Type</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Gcd</span> (<span class="dt">I</span> <span class="dv">12</span>) (<span class="dt">I</span> <span class="dv">10</span>) a</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>        <span class="ot">=&gt;</span> <span class="dt">Main</span> a</span></code></pre></div>
<div class="sourceCode" id="cb22"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ghc Main.hs</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./Main.hs</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span></span></code></pre></div>
]]></summary>
</entry>
<entry>
    <title>Haxpuck</title>
    <link href="https://www.atnnn.com/p/haxpuck" />
    <id>https://www.atnnn.com/p/haxpuck</id>
    <published>2012-08-13T00:00:00Z</published>
    <updated>2012-08-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August 13, 2012
    
</div>

<p><a href="http://haxball.com">Haxball</a> is a very fun multiplayer soccer game. I have written <a href="http://haxpuck.com">Haxpuck</a>, an editor for haxball stadiums. The <a href="http://github.com/atnnn/haxpuck">source code</a> is available on github.</p>
<p><img src="/images/haxpuck/haxpuckss.png" /></p>
<p><img src="/images/haxpuck/haxpuck-new1.png" /></p>
<iframe width="600" height="400" src="//www.youtube.com/embed/fxkPZws4Ago" frameborder="0" allowfullscreen>
</iframe>
]]></summary>
</entry>

</feed>
